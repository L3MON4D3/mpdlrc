//go:build generate
// +build generate

// TODO:
// This was forked from go.uber.org/atomic in https://github.com/eNV25/atomic.
// We use this since changes weren't merged
// and we don't want to use mod replace.

package main

import (
	"os"
	"path/filepath"
	"regexp"
)

//go:generate git clone -b my --depth 1 --single-branch https://github.com/eNV25/atomic.git
//go:generate go run README.go

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func files(ops ...func(map[string]struct{})) map[string]struct{} {
	files := make(map[string]struct{})
	for _, op := range ops {
		op(files)
	}
	return files
}

func matches(glob string) []string {
	ms, err := filepath.Glob(filepath.FromSlash(glob))
	check(err)
	return ms
}

func include(glob string) func(map[string]struct{}) {
	return func(fs map[string]struct{}) {
		for _, f := range matches(glob) {
			fs[f] = struct{}{}
		}
	}
}

func exclude(glob string) func(map[string]struct{}) {
	return func(fs map[string]struct{}) {
		for _, f := range matches(glob) {
			delete(fs, f)
		}
	}
}

func main() {
	for f := range files(
		include("*"),
		exclude("atomic"),
		exclude("README.go"),
	) {
		err := os.RemoveAll(f)
		check(err)
	}

	gogenline := regexp.MustCompile(`(?m)[\r\n]+^//go:generate.*$`)
	for f := range files(
		include("atomic/*.go"),
		include("atomic/*.s"),
		exclude("atomic/*_test.go"),
		exclude("atomic/gen*.go"),
	) {
		dst := filepath.Base(f)
		data, err := os.ReadFile(f)
		check(err)
		data = append([]byte("// Code generated by github.com/env25/mpdlrc/internal/atomic. DO NOT EDIT.\n"), data...)
		data = gogenline.ReplaceAll(data, nil) // delete
		err = os.WriteFile(dst, data, 0o644)
		check(err)
	}

	err := os.RemoveAll("atomic")
	check(err)
}
